b <- pred_gen(5.1, 3.5,1.4,0.2)
b
pred_gen <- function(slength, swidth, plength, pwidth){
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
t <- cbind(as.numeric(preds),c("setosa","versicolor","virginica"))
colnames(t)=c("Probabilities","Species")
prob_df <- as.data.frame(t)
prob_df$Probabilities = as.numeric(prob_df$Probabilities)
arrange(prob_df,desc("Probabilities"))
return(prob_df)
}
b <- pred_gen(5.1, 3.5,1.4,0.2)
b
pred_gen <- function(slength, swidth, plength, pwidth){
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
t <- cbind(preds,c("setosa","versicolor","virginica"))
colnames(t)=c("Probabilities","Species")
prob_df <- as.data.frame(t)
return(prob_df)
}
b <- pred_gen(5.1, 3.5,1.4,0.2)
b
str(b)
pred_gen <- function(slength, swidth, plength, pwidth){
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
t <- cbind(preds,c("setosa","versicolor","virginica"))
colnames(t)=c("Probabilities","Species")
prob_df <- as.data.frame(t)
prob_df$Probabilities <- as.numeric(as.character(prob_df$Probabilities))
prob_df2 <- arrange(prob_df,desc(Probabilities))
return(prob_df2)
}
b <- pred_gen(5.1, 3.5,1.4,0.2)
b
pred_gen <- function(slength, swidth, plength, pwidth){
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
t <- cbind(preds,c("setosa","versicolor","virginica"))
colnames(t)=c("Probabilities","Species")
prob_df <- as.data.frame(t)
prob_df$Probabilities <- as.numeric(as.character(prob_df$Probabilities))
prob_df2 <- arrange(prob_df,Probabilities)
return(prob_df2)
}
b <- pred_gen(5.1, 3.5,1.4,0.2)
b
runApp()
pred_gen <- function(slength, swidth, plength, pwidth){
#make prediction based on inputs
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
t <- cbind(preds,c("setosa","versicolor","virginica"))
colnames(t)=c("Probabilities","Species")
prob_df <- as.data.frame(t)
prob_df$Probabilities <- as.numeric(as.character(prob_df$Probabilities))
prob_df$Species <- as.character(prob_df$Species)
prob_df2 <- arrange(prob_df,desc(Probabilities))
return(prob_df2)
}
b <- pred_gen(5.1, 3.5,1.4,0.2)
b
b <- pred_gen(7.0, 3.2,4.7,1.4)
b
pred_gen <- function(slength, swidth, plength, pwidth){
#make prediction based on inputs
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
t <- cbind(preds,c("setosa","versicolor","virginica"))
colnames(t)=c("Probabilities","Species")
prob_df <- as.data.frame(t)
prob_df$Probabilities <- as.numeric(as.character(prob_df$Probabilities))
prob_df$Species <- as.character(prob_df$Species)
prob_df2 <- arrange(prob_df,Probabilities)
return(prob_df2)
}
b <- pred_gen(7.0, 3.2,4.7,1.4)
b
runApp()
pred_gen <- function(slength, swidth, plength, pwidth){
#make prediction based on inputs
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
t <- as.dataframe(preds)%>%
cbind(c("setosa","versicolor","virginica"))
colnames(t) = c("probability","species")
#sort by descending probability
ts<- t%>%
arrange(desc(probability))
#return dataframe
return(ts)
}
b <- pred_gen(7.0, 3.2,4.7,1.4)
b
pred_gen <- function(slength, swidth, plength, pwidth){
#make prediction based on inputs
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
t <- as.dataframe(preds)%>%
cbind(c("setosa","versicolor","virginica"))
colnames(t) = c("probability","species")
#sort by descending probability
ts<- t%>%
arrange(desc(probability))
#return dataframe
return(ts)
pred_gen <- function(slength, swidth, plength, pwidth){
#make prediction based on inputs
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
t <- as.dataframe(preds)%>%
cbind(c("setosa","versicolor","virginica"))
colnames(t) = c("probability","species")
#sort by descending probability
ts<- t%>%
arrange(desc(probability))
#return dataframe
return(ts)
}
k <- pred_gen(7.0, 3.2,4.7,1.4)
k
runApp()
shiny::runApp()
runApp()
setwd("~/GitHub/Iris-Multiclassification-Shiny-App")
runApp()
setwd("~/GitHub/Iris-Multiclassification-Shiny-App")
shiny::runApp()
runApp()
#save model
xgb.save(IrisClassifier,"IrisClassifier.rda")
#Creates an xgboost model to predict Iris species
# Model
# 1. Create a folder "inst" and add a model script that builds and saves a model
# 2. Build a multi-class classification model predicting the Species. I recommend using xgboost but you have the freedom to use whatever method you would like
# 3. If you use xgboost use objective = multi:softprob and eval_metric = mlogloss
#import libraries
library(xgboost)
library(tidyverse)
#get iris species as y variable
y = as.numeric(iris$Species) - 1
#set up features for training
x <- iris %>% select(-Species)
#make matrix of predictor variables
x <- as.matrix(x)
# get variable names of predictor variables
var.names = names(x)
#set up parameter list
param <- list(
"objective" = "multi:softprob"
,"eval_metric" = "mlogloss"
,"num_class" = length(table(y))
,"eta" = .5
,"max_depth" = 10
,"lambda" = 1
,"alpha" = .8
,"min_child_weight" = 3
,"subsample" = .9
,"colsample_bytree" = .6
)
#number of rounds for cross-validation
cv.nround = 150
#set up cross-validation
bst.cv <- xgb.cv(param = param, data = x, label = y
,nfold = 3, nrounds = cv.nround
,missing = NA, prediction = TRUE)
#get number of rounds based on logloss on test set from cross validation
nround = which(bst.cv$evaluation_log$test_mlogloss_mean == min(bst.cv$evaluation_log$test_mlogloss_mean))
#build classifier
IrisClassifier <- xgboost(params = param, data = x, label = y
,nrounds = nround, missing = NA)
#save model
xgb.save(IrisClassifier,"IrisClassifier.rda")
#will need this code for the global app, commenting out for now
# #get predictions
# preds <- predict(IrisClassifier, x)
#
# #makepredictions into dataframe
# preds2 <- as.data.frame(matrix(preds,nrow=150, ncol=3,byrow=TRUE))
# colnames(preds2) <- c("setosa","versicolor","virginica")
runApp()
#save model
xgb.save(IrisClassifier,"IrisClassifier.model")
#Creates an xgboost model to predict Iris species
# Model
# 1. Create a folder "inst" and add a model script that builds and saves a model
# 2. Build a multi-class classification model predicting the Species. I recommend using xgboost but you have the freedom to use whatever method you would like
# 3. If you use xgboost use objective = multi:softprob and eval_metric = mlogloss
#import libraries
library(xgboost)
library(tidyverse)
#get iris species as y variable
y = as.numeric(iris$Species) - 1
#set up features for training
x <- iris %>% select(-Species)
#make matrix of predictor variables
x <- as.matrix(x)
# get variable names of predictor variables
var.names = names(x)
#set up parameter list
param <- list(
"objective" = "multi:softprob"
,"eval_metric" = "mlogloss"
,"num_class" = length(table(y))
,"eta" = .5
,"max_depth" = 10
,"lambda" = 1
,"alpha" = .8
,"min_child_weight" = 3
,"subsample" = .9
,"colsample_bytree" = .6
)
#number of rounds for cross-validation
cv.nround = 150
#set up cross-validation
bst.cv <- xgb.cv(param = param, data = x, label = y
,nfold = 3, nrounds = cv.nround
,missing = NA, prediction = TRUE)
#get number of rounds based on logloss on test set from cross validation
nround = which(bst.cv$evaluation_log$test_mlogloss_mean == min(bst.cv$evaluation_log$test_mlogloss_mean))
#build classifier
IrisClassifier <- xgboost(params = param, data = x, label = y
,nrounds = nround, missing = NA)
#save model
xgb.save(IrisClassifier,"IrisClassifier.model")
#will need this code for the global app, commenting out for now
# #get predictions
# preds <- predict(IrisClassifier, x)
#
# #makepredictions into dataframe
# preds2 <- as.data.frame(matrix(preds,nrow=150, ncol=3,byrow=TRUE))
# colnames(preds2) <- c("setosa","versicolor","virginica")
runApp()
runApp()
runApp()
pred_gen <- function(slength, swidth, plength, pwidth){
#make prediction based on inputs
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
t <- as.data.frame(preds)%>%
return(t)
}
k <- pred_gen(7.0, 3.2,4.7,1.4)
k
pred_gen <- function(slength, swidth, plength, pwidth){
#make prediction based on inputs
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
t <- as.data.frame(preds)
return(t)
}
k <- pred_gen(7.0, 3.2,4.7,1.4)
k
pred_gen <- function(slength, swidth, plength, pwidth){
#make prediction based on inputs
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
t <- as.data.frame(preds)%>%
rownames = c("setosa","versicolor","virginica")
return(t)
}
k <- pred_gen(7.0, 3.2,4.7,1.4)
k
pred_gen <- function(slength, swidth, plength, pwidth){
#make prediction based on inputs
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
t <- as.data.frame(preds)
rownames(t) = c("setosa","versicolor","virginica")
return(t)
}
k <- pred_gen(7.0, 3.2,4.7,1.4)
k
pred_gen <- function(slength, swidth, plength, pwidth){
#make prediction based on inputs
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
t <- as.data.frame(preds)
rownames(t) = c("setosa","versicolor","virginica")
t%>%arrange(desc(preds))
return(t)
}
k <- pred_gen(7.0, 3.2,4.7,1.4)
k
pred_gen <- function(slength, swidth, plength, pwidth){
#make prediction based on inputs
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
t <- as.data.frame(preds)
rownames(t) = c("setosa","versicolor","virginica")
return(t)
}
k <- pred_gen(7.0, 3.2,4.7,1.4)
k
pred_gen <- function(slength, swidth, plength, pwidth){
#make prediction based on inputs
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
#t <- as.data.frame(preds)
#rownames(t) = c("setosa","versicolor","virginica")
return(preds)
}
k <- pred_gen(7.0, 3.2,4.7,1.4)
k
pred_gen <- function(slength, swidth, plength, pwidth){
#make prediction based on inputs
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
#t <- as.data.frame(preds)
#rownames(t) = c("setosa","versicolor","virginica")
return(preds)
}
k <- pred_gen(5.8, 2.7,1.8,5.9)
k
#create function to generate prediction table
pred_gen <- function(slength, swidth, plength, pwidth){
#make prediction based on inputs
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
preds_labeled <- matrix(preds, nrow = 3, ncol = 1)%>%
t()%>%
data.frame%>%
mutate(max = max.col.(.,ties.method="last"),label = val_labs + 1)
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
#t <- as.data.frame(preds)
#rownames(t) = c("setosa","versicolor","virginica")
return(preds_labeled)
}
k <- pred_gen(5.8, 2.7,1.8,5.9)
k
xgmodel <- xgb.load("IrisClassifier.model")
return(preds)
pred_gen <- function(slength, swidth, plength, pwidth){
#make prediction based on inputs
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
#t <- as.data.frame(preds)
#rownames(t) = c("setosa","versicolor","virginica")
return(preds)
}
k <- pred_gen(5.8, 2.7,1.8,5.9)
k
str(k)
k <- pred_gen(5,4,3,2,1)
k
c <- pred_gen(5,4,3,2,1)
c
pred_gen <- function(slength, swidth, plength, pwidth){
#make prediction based on inputs
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
#t <- as.data.frame(preds)
#rownames(t) = c("setosa","versicolor","virginica")
return(preds)
}
c <- pred_gen(5,4,3,2,1)
c
At first, I thought that the prompt meant we had to use the table and get the probabilities based on the predictions we got when we
#ran xgboost on the whole thing. I didn't realize we were supposed to just run the xgboost model on the new inputs. I commented out
#the previous code and added the correct code above.
#load saved xgboost model
xgmodel <- xgb.load("IrisClassifier.model")
#create function to generate prediction table
pred_gen <- function(slength, swidth, plength, pwidth){
#make prediction based on inputs
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
#t <- as.data.frame(preds)
#rownames(t) = c("setosa","versicolor","virginica")
return(preds)
}
c <- pred_gen(5,4,3,2,1)
c
c <- pred_gen(5,4,3,2)
c
d <- pred_gen(7,3,4,0.2)
d
pred_gen <- function(slength, swidth, plength, pwidth){
#make prediction based on inputs
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
# create data frame with probabilities
# cbind and colnames threw errors when I wanted to chain, hence, the ugly code
# had to throw in another column with the names since the labels wouldn't cooperate
t <- as.data.frame(preds)
rownames(t) = c("setosa","versicolor","virginica")
return(t)
}
d <- pred_gen(7,3,4,0.2)
d
pred_gen <- function(slength, swidth, plength, pwidth){
#make prediction based on inputs
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
# create data frame with probabilities
# cbind and colnames threw errors when I wanted to chain, hence, the ugly code
# had to throw in another column with the names since the labels wouldn't cooperate
t <- as.data.frame(preds)
rownames(t) = c("setosa","versicolor","virginica")
colnames(t) = c("probabilities")
t%>%arrange(desc(probabilities))
return(t)
}
d <- pred_gen(7,3,4,0.2)
d
runApp()
#set up parameter list
param <- list(
"objective" = "multi:softprob"
,"eval_metric" = "mlogloss"
,"num_class" = length(table(y))
,"eta" = .5
,"max_depth" = 10
,"lambda" = 1
,"alpha" = .8
,"min_child_weight" = 3
,"subsample" = .9
,"colsample_bytree" = .6
)
#Creates an xgboost model to predict Iris species
# Model
# 1. Create a folder "inst" and add a model script that builds and saves a model
# 2. Build a multi-class classification model predicting the Species. I recommend using xgboost but you have the freedom to use whatever method you would like
# 3. If you use xgboost use objective = multi:softprob and eval_metric = mlogloss
#import libraries
library(xgboost)
library(tidyverse)
#get iris species as y variable
y = as.numeric(iris$Species) - 1
#set up features for training
x <- iris %>% select(-Species)
#make matrix of predictor variables
x <- as.matrix(x)
# get variable names of predictor variables
var.names = names(x)
#set up parameter list
param <- list(
"objective" = "multi:softprob"
,"eval_metric" = "mlogloss"
,"num_class" = length(table(y))
,"eta" = .5
,"max_depth" = 10
,"lambda" = 1
,"alpha" = .8
,"min_child_weight" = 3
,"subsample" = .9
,"colsample_bytree" = .6
)
#number of rounds for cross-validation
cv.nround = 150
#set up cross-validation
bst.cv <- xgb.cv(param = param, data = x, label = y
,nfold = 3, nrounds = cv.nround
,missing = NA, prediction = TRUE)
#get number of rounds based on logloss on test set from cross validation
nround = which(bst.cv$evaluation_log$test_mlogloss_mean == min(bst.cv$evaluation_log$test_mlogloss_mean))
#build classifier
IrisClassifier <- xgboost(params = param, data = x, label = y
,nrounds = nround, missing = NA)
#save model
xgb.save(IrisClassifier,"IrisClassifier.model")
#will need this code for the global app, commenting out for now
# #get predictions
# preds <- predict(IrisClassifier, x)
#
# #makepredictions into dataframe
# preds2 <- as.data.frame(matrix(preds,nrow=150, ncol=3,byrow=TRUE))
# colnames(preds2) <- c("setosa","versicolor","virginica")
shiny::runApp()
runApp()
runApp()
