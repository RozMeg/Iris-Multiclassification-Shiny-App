#save model
xgb.save(IrisClassifier,"IrisClassifier")
#Creates an xgboost model to predict Iris species
# Model
# 1. Create a folder "inst" and add a model script that builds and saves a model
# 2. Build a multi-class classification model predicting the Species. I recommend using xgboost but you have the freedom to use whatever method you would like
# 3. If you use xgboost use objective = multi:softprob and eval_metric = mlogloss
#import libraries
library(xgboost)
library(tidyverse)
#get iris species as y variable
y = as.numeric(iris$Species) - 1
#set up features for training
x <- iris %>% select(-Species)
#make matrix of predictor variables
x <- as.matrix(x)
# get variable names of predictor variables
var.names = names(x)
#set up parameter list
param <- list(
"objective" = "multi:softprob"
,"eval_metric" = "mlogloss"
,"num_class" = length(table(y))
,"eta" = .5
,"max_depth" = 10
,"lambda" = 1
,"alpha" = .8
,"min_child_weight" = 3
,"subsample" = .9
,"colsample_bytree" = .6
)
#number of rounds for cross-validation
cv.nround = 150
#set up cross-validation
bst.cv <- xgb.cv(param = param, data = x, label = y
,nfold = 3, nrounds = cv.nround
,missing = NA, prediction = TRUE)
#get number of rounds based on logloss on test set from cross validation
nround = which(bst.cv$evaluation_log$test_mlogloss_mean == min(bst.cv$evaluation_log$test_mlogloss_mean))
#build classifier
IrisClassifier <- xgboost(params = param, data = x, label = y
,nrounds = nround, missing = NA)
#get predictions
preds <- predict(IrisClassifier, x)
#makepredictions into dataframe
preds2 <- as.data.frame(matrix(preds,nrow=150, ncol=3,byrow=TRUE))
colnames(preds2) <- c("setosa","versicolor","virginica")
#save model
xgb.save(IrisClassifier,"IrisClassifier")
setwd("~/GitHub/Iris-Multiclassification-Shiny-App")
#import necessary libraries
library(tidyverse)
library(xgboost)
#Creates an xgboost model to predict Iris species
# Model
# 1. Create a folder "inst" and add a model script that builds and saves a model
# 2. Build a multi-class classification model predicting the Species. I recommend using xgboost but you have the freedom to use whatever method you would like
# 3. If you use xgboost use objective = multi:softprob and eval_metric = mlogloss
#import libraries
library(xgboost)
library(tidyverse)
#get iris species as y variable
y = as.numeric(iris$Species) - 1
#set up features for training
x <- iris %>% select(-Species)
#make matrix of predictor variables
x <- as.matrix(x)
# get variable names of predictor variables
var.names = names(x)
#set up parameter list
param <- list(
"objective" = "multi:softprob"
,"eval_metric" = "mlogloss"
,"num_class" = length(table(y))
,"eta" = .5
,"max_depth" = 10
,"lambda" = 1
,"alpha" = .8
,"min_child_weight" = 3
,"subsample" = .9
,"colsample_bytree" = .6
)
#number of rounds for cross-validation
cv.nround = 150
#set up cross-validation
bst.cv <- xgb.cv(param = param, data = x, label = y
,nfold = 3, nrounds = cv.nround
,missing = NA, prediction = TRUE)
#get number of rounds based on logloss on test set from cross validation
nround = which(bst.cv$evaluation_log$test_mlogloss_mean == min(bst.cv$evaluation_log$test_mlogloss_mean))
#build classifier
IrisClassifier <- xgboost(params = param, data = x, label = y
,nrounds = nround, missing = NA)
#save model
xgb.save(IrisClassifier,"IrisClassifier.rdata")
#will need this code for the global app, commenting out for now
# #get predictions
# preds <- predict(IrisClassifier, x)
#
# #makepredictions into dataframe
# preds2 <- as.data.frame(matrix(preds,nrow=150, ncol=3,byrow=TRUE))
# colnames(preds2) <- c("setosa","versicolor","virginica")
# get variable names of predictor variables
var.names = names(x)
#import necessary libraries
library(tidyverse)
library(xgboost)
#load saved xgboost model
xgmodel <- xgb.load("inst/IrisClassifier.rdata")
#setting up the dataset again
#get iris species as y variable
y = as.numeric(iris$Species) - 1
#set up features for training
x <- iris %>% select(-Species)
#make matrix of predictor variables
x <- as.matrix(x)
# get variable names of predictor variables
var.names = names(x)
#get predictions
preds <- predict(IrisClassifier, x)
#make predictions into dataframe
preds2 <- as.data.frame(matrix(preds,nrow=150, ncol=3,byrow=TRUE))
colnames(preds2) <- c("setosa","versicolor","virginica")
View(preds2)
#Global file for Iris Multiclassification Shiny app, STAT6969 HW2
# In the global file load up the model and prepare a function for generating a prediction table
#import necessary libraries
library(tidyverse)
library(xgboost)
#load saved xgboost model
xgmodel <- xgb.load("inst/IrisClassifier.rdata")
#setting up the dataset again
#get iris species as y variable
y = as.numeric(iris$Species) - 1
#set up features for training
x <- iris %>% select(-Species)
#make matrix of predictor variables
x <- as.matrix(x)
# get variable names of predictor variables
var.names = names(x)
#get predictions
preds <- predict(IrisClassifier, x)
#make predictions into dataframe
preds2 <- as.data.frame(matrix(preds,nrow=150, ncol=3,byrow=TRUE))
colnames(preds2) <- c("setosa","versicolor","virginica")
#merge predictions with Iris dataframe so we can sort by feature
main <- merge(iris, preds2)
#create function for generating a prediction table
#takes a given sepal length, sepal width, petal length, and petal width and returns a table with the list of species possibilities,
#ordered by probability
pred_gen <- function(slength, swidth, plength, pwidth){
#gets the appropriate case
case <- main%>%
#pick correct case based on values
filter(Sepal.Length == slength & Sepal.Width== swidth & Petal.Length== plength & Petal.Width == pwidth)
#make a new dataframe with the probabilities for given case
species_probs <- case%>%
select(setosa, versicolor, virginica)
}
View(Iris)
View(iris)
pred_gen <- function(slength, swidth, plength, pwidth){
#gets the appropriate case
case <- main%>%
#pick correct case based on values
filter(Sepal.Length == slength & Sepal.Width== swidth & Petal.Length== plength & Petal.Width == pwidth)
#make a new dataframe with the probabilities for given case
species_probs <- case%>%
select(setosa, versicolor, virginica)
return(species_probs)
}
pred_gen(5.1, 3.5,1.4,0.2)
View(main)
pred_gen(5.1, 3.5,1.4,0.2)
pred_gen <- function(slength, swidth, plength, pwidth){
#gets the appropriate case
case <- main%>%
#pick correct case based on values
filter(Sepal.Length == slength & Sepal.Width == swidth & Petal.Length== plength & Petal.Width == pwidth)
return(case)
# #make a new dataframe with the probabilities for given case
# species_probs <- case%>%
#   select(setosa, versicolor, virginica)
}
#Test
pred_gen(5.1, 3.5,1.4,0.2)
pred_gen <- function(slength, swidth, plength, pwidth){
#gets the appropriate case
case <- main%>%
#pick correct case based on values
filter(Sepal.Length == slength,Sepal.Width == swidth,Petal.Length== plength,Petal.Width == pwidth)
return(case)
# #make a new dataframe with the probabilities for given case
# species_probs <- case%>%
#   select(setosa, versicolor, virginica)
}
pred_gen(5.1, 3.5,1.4,0.2)
#load saved xgboost model
xgmodel <- xgb.load("inst/IrisClassifier.rdata")
#setting up the dataset again
#get iris species as y variable
y = as.numeric(iris$Species) - 1
#set up features for training
x <- iris %>% select(-Species)
#make matrix of predictor variables
x <- as.matrix(x)
# get variable names of predictor variables
var.names = names(x)
#get predictions
preds <- predict(IrisClassifier, x)
#make predictions into dataframe
preds2 <- as.data.frame(matrix(preds,nrow=150, ncol=3,byrow=TRUE))
colnames(preds2) <- c("setosa","versicolor","virginica")
#merge predictions with Iris dataframe so we can sort by feature
main <- merge(iris, preds2)
#create function for generating a prediction table
#takes a given sepal length, sepal width, petal length, and petal width and returns a table with the list of species possibilities,
#ordered by probability
pred_gen <- function(slength, swidth, plength, pwidth){
#gets the appropriate case
case <- main%>%
#pick correct case based on values
filter(Sepal.Length == slength,Sepal.Width == swidth,Petal.Length== plength,Petal.Width == pwidth)
return(case)
# #make a new dataframe with the probabilities for given case
# species_probs <- case%>%
#   select(setosa, versicolor, virginica)
}
#Test
pred_gen(5.1, 3.5,1.4,0.2)
View(main)
pred_gen <- function(slength, swidth, plength, pwidth){
#gets the appropriate case
case <- main%>%
#pick correct case based on values
filter(Sepal.Length == slength)
return(case)
# #make a new dataframe with the probabilities for given case
# species_probs <- case%>%
#   select(setosa, versicolor, virginica)
}
#Test
pred_gen(5.1, 3.5,1.4,0.2)
pred_gen <- function(slength, swidth, plength, pwidth){
#gets the appropriate case
case <- main%>%
#pick correct case based on values
filter(Sepal.Length = slength)
return(case)
# #make a new dataframe with the probabilities for given case
# species_probs <- case%>%
#   select(setosa, versicolor, virginica)
}
#Test
pred_gen(5.1, 3.5,1.4,0.2)
pred_gen <- function(slength, swidth, plength, pwidth){
#gets the appropriate case
case <- filter(main,Sepal.Length = slength)
return(case)
# #make a new dataframe with the probabilities for given case
# species_probs <- case%>%
#   select(setosa, versicolor, virginica)
}
#Test
pred_gen(5.1, 3.5,1.4,0.2)
pred_gen <- function(slength, swidth, plength, pwidth){
#gets the appropriate case
case <- filter(main,Sepal.Length == slength)
return(case)
# #make a new dataframe with the probabilities for given case
# species_probs <- case%>%
#   select(setosa, versicolor, virginica)
}
#Test
pred_gen(5.1, 3.5,1.4,0.2)
