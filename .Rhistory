#t <- as.data.frame(t(case))
return(case)
}
pred_gen(5.1, 3.5,1.4,0.2)
pred_gen <- function(slength, swidth, plength, pwidth){
#gets the appropriate case
case <- main%>%
filter(Sepal.Length == slength, Sepal.Width == swidth, Petal.Length == plength, Petal.Width == pwidth)%>%
summarize(
setosa = mean(setosa),
versicolor = mean(versicolor),
virginica = mean(virginica))
colnames(case)=c("setosa","versicolor","virginica")
t <- as.data.frame(t(case))%>%
arrange(desc(V1))
return(t)
}
#Test
pred_gen(5.1, 3.5,1.4,0.2)
pred_gen <- function(slength, swidth, plength, pwidth){
#gets the appropriate case
case <- main%>%
filter(Sepal.Length == slength, Sepal.Width == swidth, Petal.Length == plength, Petal.Width == pwidth)%>%
summarize(
setosa = mean(setosa),
versicolor = mean(versicolor),
virginica = mean(virginica))
t <- as.data.frame(t(case))%>%
rbind(c("setosa","versicolor","virginica"))
return(t)
}
#Test
pred_gen(5.1, 3.5,1.4,0.2)
pred_gen <- function(slength, swidth, plength, pwidth){
#gets the appropriate case
case <- main%>%
filter(Sepal.Length == slength, Sepal.Width == swidth, Petal.Length == plength, Petal.Width == pwidth)%>%
summarize(
setosa = mean(setosa),
versicolor = mean(versicolor),
virginica = mean(virginica))%>%
rbind(c("setosa","versicolor","virginica"))
t <- as.data.frame(t(case))%>%
return(t)
}
#Test
pred_gen(5.1, 3.5,1.4,0.2)
pred_gen <- function(slength, swidth, plength, pwidth){
#gets the appropriate case
case <- main%>%
filter(Sepal.Length == slength, Sepal.Width == swidth, Petal.Length == plength, Petal.Width == pwidth)%>%
summarize(
setosa = mean(setosa),
versicolor = mean(versicolor),
virginica = mean(virginica))
t<-as.data.frame(t(case))%>%
cbind(c("setosa","versicolor","virginica"))
return(t)
}
#Test
pred_gen(5.1, 3.5,1.4,0.2)
pred_gen <- function(slength, swidth, plength, pwidth){
#gets the appropriate case
case <- main%>%
filter(Sepal.Length == slength, Sepal.Width == swidth, Petal.Length == plength, Petal.Width == pwidth)%>%
summarize(
setosa = mean(setosa),
versicolor = mean(versicolor),
virginica = mean(virginica))
t<-as.data.frame(t(case))%>%
cbind(c("setosa","versicolor","virginica"))%>%
colnames = c("probabilities","species")%>%
arrange(desc(probabilities))
return(t)
}
#Test
pred_gen(5.1, 3.5,1.4,0.2)
pred_gen <- function(slength, swidth, plength, pwidth){
#gets the appropriate case
case <- main%>%
filter(Sepal.Length == slength, Sepal.Width == swidth, Petal.Length == plength, Petal.Width == pwidth)%>%
summarize(
setosa = mean(setosa),
versicolor = mean(versicolor),
virginica = mean(virginica))
t<-as.data.frame(t(case))%>%
cbind(c("setosa","versicolor","virginica"))%>%
colnames(t) = c("probabilities","species")%>%
return(t)
}
pred_gen(5.1, 3.5,1.4,0.2)
pred_gen <- function(slength, swidth, plength, pwidth){
#gets the appropriate case
case <- main%>%
filter(Sepal.Length == slength, Sepal.Width == swidth, Petal.Length == plength, Petal.Width == pwidth)%>%
summarize(
setosa = mean(setosa),
versicolor = mean(versicolor),
virginica = mean(virginica))
t<-as.data.frame(t(case))%>%
cbind(c("setosa","versicolor","virginica"))
colnames(t) = c("probabilities","species")
return(t)
}
#Test
pred_gen(5.1, 3.5,1.4,0.2)
pred_gen <- function(slength, swidth, plength, pwidth){
#gets the appropriate case
case <- main%>%
filter(Sepal.Length == slength, Sepal.Width == swidth, Petal.Length == plength, Petal.Width == pwidth)%>%
summarize(
setosa = mean(setosa),
versicolor = mean(versicolor),
virginica = mean(virginica))
t<-as.data.frame(t(case))%>%
cbind(c("setosa","versicolor","virginica"))
colnames(t) = c("probabilities","species")
ts<- t%>%
arrange(desc(probabilities))
return(ts)
}
#Test
pred_gen(5.1, 3.5,1.4,0.2)
pred_gen <- function(slength, swidth, plength, pwidth){
#gets the appropriate case
case <- main%>%
filter(Sepal.Length == slength, Sepal.Width == swidth, Petal.Length == plength, Petal.Width == pwidth)%>%
summarize(
setosa = mean(setosa),
versicolor = mean(versicolor),
virginica = mean(virginica))
t<-as.data.frame(t(case))%>%
cbind(c("setosa","versicolor","virginica"))
colnames(t) = c("probability","species")
ts<- t%>%
arrange(desc(probability))
return(ts)
}
#Test
pred_gen(5.1, 3.5,1.4,0.2)
View(b)
install.packages("shinydashboard")
t
library(DT)
library(tidyverse)
library(ggplot2)
ggplot(data = main, aes(x=main$Sepal.Width,y=main$Sepal.Length),color=main$Species)
ggplot(data = main, aes(x=main$Sepal.Width,y=main$Sepal.Length),color=main$Species)+
geom_point() + labs(x="Sepal Width",y="Sepal Length")
ggplot(data = main, aes(x=main$Sepal.Width,y=main$Sepal.Length))+
geom_point(aes(color=Species, shape=Species)) + labs(x="Sepal Width",y="Sepal Length")
shiny::runApp()
runApp()
View(Iris)
View(iris)
runApp()
runApp()
runApp()
runApp()
runApp()
view(Main)
View(main)
runApp()
print(preds)
xgmodel <- xgb.load("inst/IrisClassifier.rdata")
#create function to generate prediction table
pred_gen <- function(slength, swidth, plength, pwidth){
preds <- predict(IrisClassifier, as.Matrix(slength,swidth,plength,pwidth))
return(preds)
}
print(pred_gen(5.1, 3.5,1.4,0.2))
xgmodel <- xgb.load("inst/IrisClassifier.rdata")
#create function to generate prediction table
pred_gen <- function(slength, swidth, plength, pwidth){
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
return(preds)
}
print(pred_gen(5.1, 3.5,1.4,0.2))
b <- pred_gen(5.1, 3.5,1.4,0.2)
print(b[0])
b <- pred_gen(5.1, 3.5,1.4,0.2)
print(b[1])
pred_gen <- function(slength, swidth, plength, pwidth){
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
prob_df <- as.data.frame(c("setosa","versicolor","virginica"),preds)
return(prob_df)
}
b <- pred_gen(5.1, 3.5,1.4,0.2)
b
pred_gen <- function(slength, swidth, plength, pwidth){
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
prob_df <- as.data.frame(preds)
return(prob_df)
}
b <- pred_gen(5.1, 3.5,1.4,0.2)
b
pred_gen <- function(slength, swidth, plength, pwidth){
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
prob_df <- as.data.frame(preds)
rownames(prob_df) = c("setosa","versicolor","virginica")
return(prob_df)
}
b <- pred_gen(5.1, 3.5,1.4,0.2)
b
pred_gen <- function(slength, swidth, plength, pwidth){
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
prob_df <- as.data.frame(preds)%>%
rownames= c("setosa","versicolor","virginica")%>%
arrange(prob_df,desc(preds))
return(prob_df)
}
b <- pred_gen(5.1, 3.5,1.4,0.2)
b
pred_gen <- function(slength, swidth, plength, pwidth){
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
prob_df <- as.data.frame(preds)%>%
rownames= c("setosa","versicolor","virginica")%>%
colnames=c("Species","Probabilities")%>%
arrange(prob_df,desc(preds))
return(prob_df)
}
b <- pred_gen(5.1, 3.5,1.4,0.2)
b
pred_gen <- function(slength, swidth, plength, pwidth){
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
prob_df <- as.data.frame(preds)%>%
rownames= c("setosa","versicolor","virginica")%>%
colnames=c("Species","Probabilities")%>%
return(prob_df)
}
b <- pred_gen(5.1, 3.5,1.4,0.2)
b
pred_gen <- function(slength, swidth, plength, pwidth){
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
prob_df <- as.data.frame(preds)%>%
cbind(c("setosa","versicolor","virginica"))
return(prob_df)
}
b <- pred_gen(5.1, 3.5,1.4,0.2)
b
pred_gen <- function(slength, swidth, plength, pwidth){
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
prob_df <- as.data.frame(preds)%>%
cbind(c("setosa","versicolor","virginica"))%>%
colnames(c("Species","Probabilities"))
return(prob_df)
}
b <- pred_gen(5.1, 3.5,1.4,0.2)
b
pred_gen <- function(slength, swidth, plength, pwidth){
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
prob_df <- as.data.frame(preds)%>%
cbind(c("setosa","versicolor","virginica"))%>%
colnames(prob_df)=c("Species","Probabilities")
return(prob_df)
}
b <- pred_gen(5.1, 3.5,1.4,0.2)
b
pred_gen <- function(slength, swidth, plength, pwidth){
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
prob_df <- as.data.frame(preds)
cbind(prob_df,c("setosa","versicolor","virginica"))
colnames(prob_df)=c("Species","Probabilities")
return(prob_df)
}
b <- pred_gen(5.1, 3.5,1.4,0.2)
b
pred_gen <- function(slength, swidth, plength, pwidth){
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
t <- cbind(preds,c("setosa","versicolor","virginica"))
prob_df <- as.data.frame(t)
colnames(prob_df)=c("Species","Probabilities")
return(prob_df)
}
b <- pred_gen(5.1, 3.5,1.4,0.2)
b
pred_gen <- function(slength, swidth, plength, pwidth){
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
t <- cbind(preds,c("setosa","versicolor","virginica"))
prob_df <- as.data.frame(t)
colnames(prob_df)=c("Probabilities","Species")
return(prob_df)
}
b <- pred_gen(5.1, 3.5,1.4,0.2)
b
pred_gen <- function(slength, swidth, plength, pwidth){
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
t <- cbind(preds,c("setosa","versicolor","virginica"))
prob_df <- as.data.frame(t)
colnames(prob_df)=c("Probabilities","Species")
arrange(prob_df,desc("Probabilities"))
return(prob_df)
}
b <- pred_gen(5.1, 3.5,1.4,0.2)
b
runApp()
runApp()
runApp()
#Test
b <- pred_gen(5.1, 3.5,1.4,0.2)
b
runApp()
runApp()
pred_gen <- function(slength, swidth, plength, pwidth){
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
t <- cbind(preds,c("setosa","versicolor","virginica"))
colnames(t)=c("Probabilities","Species")
#prob_df2 <- arrange(prob_df,desc("Probabilities"))
return(t)
}
b <- pred_gen(5.1, 3.5,1.4,0.2)
b
pred_gen <- function(slength, swidth, plength, pwidth){
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
t <- cbind(preds,c("setosa","versicolor","virginica"))
colnames(t)=c("Probabilities","Species")
prob_df <- as.data.frame(t)
return(prob_df)
}
b <- pred_gen(5.1, 3.5,1.4,0.2)
b
str(b)
pred_gen <- function(slength, swidth, plength, pwidth){
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
t <- cbind(as.numeric(preds),c("setosa","versicolor","virginica"))
colnames(t)=c("Probabilities","Species")
prob_df <- as.data.frame(t)
return(prob_df)
}
b <- pred_gen(5.1, 3.5,1.4,0.2)
b
str(b)
pred_gen <- function(slength, swidth, plength, pwidth){
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
t <- cbind(as.numeric(preds),c("setosa","versicolor","virginica"))
colnames(t)=c("Probabilities","Species")
prob_df <- as.data.frame(t)
arrange(prob_df,desc("Probabilities"))
return(prob_df)
}
b <- pred_gen(5.1, 3.5,1.4,0.2)
b
pred_gen <- function(slength, swidth, plength, pwidth){
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
t <- cbind(as.numeric(preds),c("setosa","versicolor","virginica"))
colnames(t)=c("Probabilities","Species")
prob_df <- as.data.frame(t)
prob_df$Probabilities = as.numeric(prob_df$Probabilities)
arrange(prob_df,desc("Probabilities"))
return(prob_df)
}
b <- pred_gen(5.1, 3.5,1.4,0.2)
b
pred_gen <- function(slength, swidth, plength, pwidth){
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
t <- cbind(preds,c("setosa","versicolor","virginica"))
colnames(t)=c("Probabilities","Species")
prob_df <- as.data.frame(t)
return(prob_df)
}
b <- pred_gen(5.1, 3.5,1.4,0.2)
b
str(b)
pred_gen <- function(slength, swidth, plength, pwidth){
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
t <- cbind(preds,c("setosa","versicolor","virginica"))
colnames(t)=c("Probabilities","Species")
prob_df <- as.data.frame(t)
prob_df$Probabilities <- as.numeric(as.character(prob_df$Probabilities))
prob_df2 <- arrange(prob_df,desc(Probabilities))
return(prob_df2)
}
b <- pred_gen(5.1, 3.5,1.4,0.2)
b
pred_gen <- function(slength, swidth, plength, pwidth){
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
t <- cbind(preds,c("setosa","versicolor","virginica"))
colnames(t)=c("Probabilities","Species")
prob_df <- as.data.frame(t)
prob_df$Probabilities <- as.numeric(as.character(prob_df$Probabilities))
prob_df2 <- arrange(prob_df,Probabilities)
return(prob_df2)
}
b <- pred_gen(5.1, 3.5,1.4,0.2)
b
runApp()
pred_gen <- function(slength, swidth, plength, pwidth){
#make prediction based on inputs
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
t <- cbind(preds,c("setosa","versicolor","virginica"))
colnames(t)=c("Probabilities","Species")
prob_df <- as.data.frame(t)
prob_df$Probabilities <- as.numeric(as.character(prob_df$Probabilities))
prob_df$Species <- as.character(prob_df$Species)
prob_df2 <- arrange(prob_df,desc(Probabilities))
return(prob_df2)
}
b <- pred_gen(5.1, 3.5,1.4,0.2)
b
b <- pred_gen(7.0, 3.2,4.7,1.4)
b
pred_gen <- function(slength, swidth, plength, pwidth){
#make prediction based on inputs
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
t <- cbind(preds,c("setosa","versicolor","virginica"))
colnames(t)=c("Probabilities","Species")
prob_df <- as.data.frame(t)
prob_df$Probabilities <- as.numeric(as.character(prob_df$Probabilities))
prob_df$Species <- as.character(prob_df$Species)
prob_df2 <- arrange(prob_df,Probabilities)
return(prob_df2)
}
b <- pred_gen(7.0, 3.2,4.7,1.4)
b
runApp()
pred_gen <- function(slength, swidth, plength, pwidth){
#make prediction based on inputs
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
t <- as.dataframe(preds)%>%
cbind(c("setosa","versicolor","virginica"))
colnames(t) = c("probability","species")
#sort by descending probability
ts<- t%>%
arrange(desc(probability))
#return dataframe
return(ts)
}
b <- pred_gen(7.0, 3.2,4.7,1.4)
b
pred_gen <- function(slength, swidth, plength, pwidth){
#make prediction based on inputs
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
t <- as.dataframe(preds)%>%
cbind(c("setosa","versicolor","virginica"))
colnames(t) = c("probability","species")
#sort by descending probability
ts<- t%>%
arrange(desc(probability))
#return dataframe
return(ts)
pred_gen <- function(slength, swidth, plength, pwidth){
#make prediction based on inputs
preds <- predict(IrisClassifier, as.matrix(slength,swidth,plength,pwidth))
#create data frame with probabilities
#cbind and colnames threw errors when I wanted to chain, hence, the ugly code
#had to throw in another column with the names since the labels wouldn't cooperate
t <- as.dataframe(preds)%>%
cbind(c("setosa","versicolor","virginica"))
colnames(t) = c("probability","species")
#sort by descending probability
ts<- t%>%
arrange(desc(probability))
#return dataframe
return(ts)
}
k <- pred_gen(7.0, 3.2,4.7,1.4)
k
runApp()
shiny::runApp()
runApp()
setwd("~/GitHub/Iris-Multiclassification-Shiny-App")
runApp()
